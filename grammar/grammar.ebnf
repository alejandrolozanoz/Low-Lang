// Used to produce Railroad Diagrams in https://www.bottlecaps.de/rr/ui 

/* ---TOKENS--- */

// Reserved Words
PROGRAM ::= 'programa'
MAIN ::= 'principal'
FUNCTION ::= 'funcion'
RETURN ::= 'regresa'
INPUT ::= 'lee'
OUTPUT ::= 'escribe'
IF ::= 'si'
THEN ::= 'entonces'
ELSE ::= 'sino'
WHILE ::= 'mientras'
DO ::= 'hacer'
FROM ::= 'desde'
TO ::= 'hasta'
VOID ::= 'void'

// Data types
VAR ::= 'var'
STRING ::= 'string'
CHAR ::= 'char'
INT ::= 'int'
FLOAT ::= 'float'
BOOL ::= 'bool'

// Syntax Symbols
LEFT_PARENTHESIS ::= '('
RIGHT_PARENTHESIS ::= ')'
LEFT_BRACKET ::= '['
RIGHT_BRACKET ::= ']'
LEFT_CURLY ::= '{'
RIGHT_CURLY ::= '}'
COMMA ::= ','
COLON ::= ':'
SEMICOLON ::= ';'

// Operators
ASSIGN ::= '='
AND ::= '&'
OR ::= '|'
LESS ::= '<'
LESS_OR_EQUAL ::= '<='
GREATER ::= '>'
GREATER_OR_EQUAL ::= '>='
EQUAL ::= '=='
NOT_EQUAL ::= '!='
ADDITION ::= '+'
SUBTRACTION ::= '-'
MULTIPLICATION ::= '*'
DIVISION ::= '/'

//Constants
STRING_CONSTANT ::= '"' .*? '"'
CHAR_CONSTANT ::= [.]
INT_CONSTANT ::= [0-9]+
FLOAT_CONSTANT ::= [0-9]+.[0-9]+
BOOL_CONSTANT ::= 'true' | 'false'
ID ::= [_A-Za-z]([_A-Za-z0-9])*


program ::= PROGRAM ID SEMICOLON variable_declaration? functions main_function

variable_declaration ::= VAR variables+

variables ::= data_type ID declaration_array_brackets? (COMMA ID declaration_array_brackets?)* SEMICOLON

declaration_array_brackets ::= LEFT_BRACKET INT_CONSTANT? RIGHT_BRACKET

data_type ::= INT | BOOL | FLOAT | STRING | CHAR

constant ::= BOOL_CONSTANT | FLOAT_CONSTANT | INT_CONSTANT | CHAR_CONSTANT | STRING_CONSTANT

functions ::= function*

function ::= FUNCTION function_type ID  LEFT_PARENTHESIS parameters? RIGHT_PARENTHESIS variable_declaration? LEFT_CURLY statutes RIGHT_CURLY

function_type ::= (data_type | VOID)

parameters ::= data_type ID  (COMMA data_type ID)*

logic_expresions ::= relational_expresions ((AND | OR) logic_expresions)*

relational_expresions ::= addition_substraction_expresions   ((LESS |   LESS_OR_EQUAL |   GREATER |   GREATER_OR_EQUAL |   NOT_EQUAL |   EQUAL) relational_expresions)*

addition_substraction_expresions ::= multiplication_division_expresions ((ADDITION | SUBTRACTION) addition_substraction_expresions)*

multiplication_division_expresions ::= expresion ((MULTIPLICATION | DIVISION) multiplication_division_expresions)*

expresion ::= constant | ID array_brackets? | LEFT_PARENTHESIS logic_expresions RIGHT_PARENTHESIS | function_call

array_brackets ::= (LEFT_BRACKET logic_expresions RIGHT_BRACKET)

function_call ::= ID LEFT_PARENTHESIS (logic_expresions (COMMA logic_expresions)* )? RIGHT_PARENTHESIS

main_function ::= MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY statutes RIGHT_CURLY

statutes ::= (assignation | read_function_call | write_function_call | void_function_call | return_statement | conditional_function | while_function | from_function )*

assignation ::=  ID array_brackets? ASSIGN  logic_expresions SEMICOLON

read_function_call ::= INPUT LEFT_PARENTHESIS ID array_brackets?  (COMMA ID array_brackets?)* RIGHT_PARENTHESIS SEMICOLON

write_function_call ::= OUTPUT LEFT_PARENTHESIS logic_expresions (COMMA (logic_expresions))* RIGHT_PARENTHESIS SEMICOLON

void_function_call ::= ID LEFT_PARENTHESIS (logic_expresions (COMMA logic_expresions)* )? RIGHT_PARENTHESIS SEMICOLON 

return_statement ::= RETURN LEFT_PARENTHESIS logic_expresions RIGHT_PARENTHESIS SEMICOLON

conditional_function ::= IF LEFT_PARENTHESIS logic_expresions RIGHT_PARENTHESIS THEN LEFT_CURLY statutes RIGHT_CURLY (ELSE LEFT_CURLY statutes RIGHT_CURLY)?

while_function ::= WHILE LEFT_PARENTHESIS logic_expresions RIGHT_PARENTHESIS DO LEFT_CURLY statutes RIGHT_CURLY

from_function ::= FROM ID array_brackets? ASSIGN logic_expresions TO INT_CONSTANT DO LEFT_CURLY statutes RIGHT_CURLY 